{"version":3,"file":"static/webpack/static/development/pages/_app.js.f49affcb5314bb08fbf7.hot-update.js","sources":["webpack:///./lib/withData.js"],"sourcesContent":["import withApollo from 'next-with-apollo';\nimport ApolloClient from 'apollo-boost';\n// import { InMemoryCache } from 'apollo-cache-inmemory';\nimport { endpoint, prodendpoint } from '../config';\nimport { LOCAL_STATE_QUERY } from '../components/Cart';\n\nfunction createClient({ headers }) {\n  return new ApolloClient({\n    uri: process.env.NODE_ENV === 'development' ? endpoint : prodendpoint,\n    request: operation => {\n      operation.setContext({\n        // credentials: 'include',\n\n        fetchOptions: {\n          // credentials: 'include',\n          // mode: 'no-cors',\n        },\n        connectToDevTools: true,\n        headers,\n      });\n    },\n    //  local state data {like public store in}\n    clientState: {\n      resolvers: {\n        Mutation: {\n          toggleCart(_, variables, { cache }) {\n            // read the cartOpen value from the cache\n            const { cartOpen } = cache.readQuery({\n              query: LOCAL_STATE_QUERY,\n            });\n            // write cart state to the opposite\n            const data = { data: { cartOpen: !cartOpen } };\n            cache.writeData(data);\n            return data;\n          },\n        },\n      },\n      defaults: {\n        cartOpen: false,\n      },\n    },\n  });\n}\n\nexport default withApollo(createClient);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAFA;AAIA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAGA;AADA;AAFA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAVA;AADA;AAcA;AACA;AADA;AAfA;AAfA;AAmCA;AACA;AACA;;;;A","sourceRoot":""}